library(ggplot2)
library(gridExtra)
library(corpcor)
library(grid)
library(Rfast)
library(ggrepel)
library(latex2exp)
library(plyr)
rm(list= ls())
source("~/../Desktop/Kod,testy a data pre model/Kapitola 3 - funkcie model/Funkcie model.R")
# dataframe pre ulozenie odhadnutych dat z testu
#
vystupTest = data.frame(matrix(NA, nrow = 900, ncol = 26))
colnames(vystupTest) = c("B","C","D","F","G","ro","sigma","delta",
"oB","oC","oD","oF","oG","oRo","oSigma","oDelta",
"min1","min2","min3",
"Q_1","Q_2","Q_3","Q_4","Q_5","pDat","cas")
par    = paramElipsa(3,-2,-5,-4,10, 0.8, 0.005, 0.001)
parApr = c(0,1,0)
i    = 10
iter = 1
while(i <= 300) {
for (j in c(1:30)) {
set.seed(iter)
tm = proc.time()
aprox = aproxData(par, parApr, velkost = i, iter = 6, plot = F, vypis = F)
proc = proc.time() - tm
if(isFALSE(aprox)){vystupTest[iter,] = 0}
else{
vystupTest[iter, ] = cbind(aprox,i,proc[[3]])
}
cat(iter,i,j,"\n")
iter = iter+1
}
i = i+10
}
# ina elipsa
#
par    = paramElipsa(1,-1/4,-14,-12,60, 0.4, 0.05, 0)
parApr = c(0,1,0)
i    = 10
iter = 1
while(i <= 300) {
for (j in c(1:30)) {
set.seed(iter)
tm = proc.time()
aprox = aproxData(par, parApr, velkost = i, iter = 6, plot = F, vypis = F)
proc = proc.time() - tm
if(isFALSE(aprox)){vystupTest[iter,] = 0}
else{
vystupTest[iter, ] = cbind(aprox,i,proc[[3]])
}
cat(iter,i,j,"\n")
iter = iter+1
}
i = i+10
}
# uprava dat - odlahle pozorovania
#
path = setwd("~/../Desktop/Kod,testy a data pre model/Data/PocetDat")
load("vystupTestPocetDatNastavenie1.Rda")
data1 = vystupTest
load("vystupTestPocetDatNastavenie2.Rda")
data2 = vystupTest
rm(vystupTest)
data1[591,9:16] = 3
data1[43, 9:16] = c(3,-2,-5,-4,10, 0.8, 0.005, 0.001)
data1[14, 9:16] = c(3,-2,-5,-4,10, 0.8, 0.005, 0.001)
data1[24, 9:16] = c(3,-2,-5,-4,10, 0.8, 0.005, 0.001)
v = seq(10,300, by = 10)
s = c(9:16)
k = 1
l = 1
# matica na ulozenie strednej hodnoty
std = matrix(NA, nrow = 30, ncol = 8)
colnames(std) = c("oB","oC","oD","oF","oG","oRo","oSigma","oDelta")
# vypocitanie priemernej hodnoty odhadnutych parametrov
#
for (j in s) {
for (i in v) {
std[k,l] = mean(data1[data1$pDat == i,j])
k = k+1
}
k = 1
l = l+1
}
std = as.data.frame(std)
B = cbind(rep(3,30), std$oB)
C = cbind(rep(-2,30), std$oC)
D = cbind(rep(-5,30), std$oD)
F = cbind(rep(-4,30), std$oF)
G = cbind(rep(10,30), std$oG)
stl = rep(seq(10,300,10),5)
novedata = rbind(B,C,D,F,G)
novedata = cbind(novedata,stl)
colnames(novedata) = c("parametre", "data", "pocet")
rownames(novedata) = c(1:150)
novedata = as.data.frame(novedata)
novedata$parametre = factor(novedata$parametre,
levels = c(3,-2,-5,-4,10),
labels = c("B","C","D","F","G"))
dataGraf2 = data1[,9:13]
dataGraf2 = cbind(dataGraf2,rep(seq(10,300,by = 10),each = 30))
colnames(dataGraf2)[6] = c("poDat")
dataGraf2[abs(dataGraf2$oB) > 12,] = 3
dataGraf2[abs(dataGraf2$oC) > 10,] = -2
dataGraf2[abs(dataGraf2$oD) > 15,] = -5
dataGraf2[abs(dataGraf2$oF) > 10,] = -4
dataGraf2[abs(dataGraf2$oG) > 25,] = 10
dataGraf = rbind(as.matrix(dataGraf2[,1], ncol = 1),
as.matrix(dataGraf2[,2], ncol = 1),
as.matrix(dataGraf2[,3], ncol = 1),
as.matrix(dataGraf2[,4], ncol = 1),
as.matrix(dataGraf2[,5], ncol = 1))
dataGraf = cbind(dataGraf,rep(c(3,-2,-5,-4,10),each = 900)) # faktor B,C,D,F,G
dataGraf = cbind(dataGraf, rep(seq(10,300,by = 10), each = 30)) # faktor pocet dat
dataGraf = as.data.frame(dataGraf)
colnames(dataGraf) = c("odhad", "parametre", "pocet")
dataGraf$parametre = as.factor(dataGraf$parametre)
dataGraf$parametre = revalue(dataGraf$parametre, c("3" = "B",
"-2" = "C",
"-5" = "D",
"-4" = "F",
"10" = "G"))
plot = ggplot(data = novedata, aes(x = pocet, y = data, color = parametre)) +
geom_line(size = 0.5) +
geom_point(data = novedata[novedata$pocet == 100,],aes(x = pocet, y = data),
size = 3) +
labs(y="parametre elispy", x="veľkosť vstupných dát (x,y)") +
theme(legend.position="right") +
labs(colour = "parametre\nelipsy", fill = "parametre\nodhad") +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 1)),
fill = guide_legend(nrow = 5, override.aes = list(size = 1))) +
geom_label_repel(data = novedata[novedata$pocet == 100,],
aes(fill = parametre, label = data),
box.padding = unit(1, "lines"),
point.padding = unit(2, 'lines'),
colour = "black",
fontface = "bold",
size = 2.9) +
facet_grid(parametre ~., scales = "free")
plot
library(conics)
library(ggplot2)
library(gridExtra)
library(corpcor)
library(grid)
library(Rfast)
library(ggrepel)
library(latex2exp)
library(plyr)
rm(list= ls())
source("~/../Desktop/Kod,testy a data pre model/Kapitola 3 - funkcie model/Funkcie model.R")
# vykreslenie casu potrebneho na vypocet modelu pre urcity pocet dat na vstupe
#
path = setwd("~/../Desktop/Kod,testy a data pre model/Data/PocetDat")
load("vystupTestCasNaOdhad.Rda")
data = cas
rm(cas)
v = seq(10,300, by = 10)
k = 1
l = 1
std = matrix(NA, nrow = 30, ncol = 2)
std[,2] = v
colnames(std) = c("std", "pocet")
colnames(data) = c("cas", "pocetDat")
data[10,] = c(0.6,20)
for (i in v) {
std[k,1] = mean(data[data$pocetDat == i,1])
k = k+1
}
std = as.data.frame(std)
colnames(std) = c("priemer", "pocet")
plot2 = ggplot(data = std, aes(x = pocet, y = priemer)) +
geom_line(color = "lightsalmon3", size = 0.6) +
geom_point(aes(x = 100, y = std[10,1]), color = "lightsalmon3", size = 2) +
labs(y="čas v sekundách", x="veľkosť vstupných dát (x,y)", fill = "čas pre 100 pozorovaní") +
theme(legend.position="botton") +
geom_label_repel(data = std[10,], aes(fill = pocet, label = 3.434),
box.padding = unit(5, "lines"),
point.padding = unit(0.5, 'lines'),
colour = "black",
fill = "lightsalmon3",
fontface = "bold",
size = 2.8)
plot2
rm(list= ls())
# nacitane funkcie su identicke ako v zakladnej sade. Ale v tomto subore su doplnene pomecne funkcie
# ktore su pouzivane v testovani.
#
source("~/../Desktop/Kod,testy a data pre model/Kapitola 4.2.c - potrebna velkost segmentu/funkcie potrebna velkost segmentu.R")
# generovanie dat pre testovane velkosti segmentu potrebneho na odhad parametrov
# modelu. Je vygenerovanych 4 sady dat. A to v rozmedzi 500,700,1000,1500.
# Parametre pre generovanie su identicke ako v diplomovej praci
#
par  = paramElipsa(3,-2,-5,-4,10, 0.01,0.002,0.0001)
data = genDataOnElipse(3,-2,-5,-4,10,500)
path = setwd("~/../Desktop/Kod,testy a data pre model/Data/Data na odhad velkosti segmentov/Data_na_elipse_a_zasumene")
# odhad pre 500 dat
#
load("dat_500_0.01_0.002_0.0001.Rda")
odhad = data.frame(matrix(data = NA, nrow = 28, ncol = 18))
colnames(odhad) = c("B","C","D","F","G",
"ro","sigma","delta",
"min1","min2","min3",
"Q1","Q2","Q3","Q4","Q5",
"od","do")
k = 1
l = 1
v = c(71,142,213,284,355,426,500)
m = 1
for (i in c(1:7)) {
for (j in c(i:7)) {
# cat(l,"",v[j],"")
odhad[m,1:16] = odhadZRealDat(data[l:v[j],],8,vypis = T)
odhad[m,17:18] = c(l,v[j])
l = v[k]+1
k = k+1
m = m+1
}
k = 1
l = 1
# cat("\n")
}
# odhad pre 700 dat
#
load("dat_700_0.01_0.002_0.0001.Rda")
odhad = data.frame(matrix(data = NA, nrow = 28, ncol = 18))
colnames(odhad) = c("B","C","D","F","G",
"ro","sigma","delta",
"min1","min2","min3",
"Q1","Q2","Q3","Q4","Q5",
"od","do")
k = 1
l = 1
v = c(100,200,300,400,500,600,700)
m = 1
for (i in c(1:7)) {
for (j in c(i:7)) {
# cat(l,"",v[j],"")
odhad[m,1:16] = odhadZRealDat(data[l:v[j],],8,vypis = T)
odhad[m,17:18] = c(l,v[j])
l = v[k]+1
k = k+1
m = m+1
}
k = 1
l = 1
# cat("\n")
}
# odhad pre 1000 dat
#
load("dat_1000_0.01_0.002_0.0001.Rda")
odhad = data.frame(matrix(data = NA, nrow = 28, ncol = 18))
colnames(odhad) = c("B","C","D","F","G",
"ro","sigma","delta",
"min1","min2","min3",
"Q1","Q2","Q3","Q4","Q5",
"od","do")
k = 1
l = 1
v = c(143,286,429,572,715,858,1000)
m = 1
for (i in c(1:7)) {
for (j in c(i:7)) {
# cat(l,"",v[j],"")
odhad[m,1:16] = odhadZRealDat(data[l:v[j],],8,vypis = T)
odhad[m,17:18] = c(l,v[j])
l = v[k]+1
k = k+1
m = m+1
}
k = 1
l = 1
# cat("\n")
}
rm(list= ls())
source("~/../Desktop/Kod,testy a data pre model/Kapitola 4.2.c - potrebna velkost segmentu/funkcie na grafy potrebna velkost segmentu.R")
setwd("~/../Desktop/Kod,testy a data pre model/Data/Data na odhad velkosti segmentov/Data_na_elipse_a_zasumene")
load("odhad_500_dat.Rda")
odhad500 = odhad
load("odhad_700_dat.Rda")
odhad700 = odhad
load("odhad_1000_dat.Rda")
odhad1000 = odhad
load("odhad_1500_dat.Rda")
odhad1500 = odhad
rm(odhad)
load("dat_500_0.01_0.002_0.0001.Rda")
data500 = data
load("dat_700_0.01_0.002_0.0001.Rda")
data700 = data
load("dat_1000_0.01_0.002_0.0001.Rda")
data1000 = data
load("dat_1500_0.01_0.002_0.0001.Rda")
data1500 = data3
rm(data)
rm(data3)
p1 = plot1(data1500,odhad1500)
rm(list= ls())
# nacitane funkcie su identicke s funkciami v diplomovej praci, len v tomto subore su
# doplnene nejake funkcie ktore su pouzivane v testovani
#
source("~/../Desktop/Kod,testy a data pre model/Kapitola 4.3 - pocet iteracii/funkcie test pocet iteracii.R")
# dataframe pre ulozenie odhadnutych dat z testu
#
vystupTest = data.frame(matrix(NA, nrow = 0, ncol = 9))
par    = paramElipsa(3,-2,-5,-4,10, 0.8, 0.005, 0.001)
parApr = c(0,1,0)
for (i in c(1:25)) {
set.seed(i)
cat("iteracia: ",i)
apr = aproxDataTesty(par, parApr, velkost = 100, iter = 30, plot = F, vypis = F)
vystupTest = rbind(vystupTest,apr[[2]])
}
setwd("~/../Desktop/Kod,testy a data pre model/Data/PocetIteracii")
load("testPocetIteracii.Rda")
data = vystupTest
rm(vystupTest)
matPlot = data[2:750,]
matPlot = rbind(matPlot,rep(0,10))
dataRozdiel = data - matPlot
dataRozdiel[seq(30,750,30),] = dataRozdiel[seq(29,750,30),]
dataRozdiel[,9] = rep(1:25, each = 30)
dataRozdiel = cbind(dataRozdiel,rep(c(1:30),25))
colnames(dataRozdiel)[10] = c("iteracia")
dataPlot = rbind(matrix(dataRozdiel[,1],ncol = 1),
matrix(dataRozdiel[,2],ncol = 1),
matrix(dataRozdiel[,3],ncol = 1),
matrix(dataRozdiel[,4],ncol = 1),
matrix(dataRozdiel[,5],ncol = 1))
dataPlot = cbind(dataPlot, rep(dataRozdiel[,9],by = 5),
rep(dataRozdiel[,10],by = 5),
rep(c(3,-2,-5,-4,10), each = 750))
dataPlot = as.data.frame(dataPlot)
colnames(dataPlot) = c("data", "odhad", "iteracia","parametre")
dataPlot$parametre = factor(dataPlot$parametre,
levels = c(3,-2,-5,-4,10),
labels = c("B","C","D","F","G"))
std = matrix(data = NA, nrow = 30, ncol = 5)
for (i in 1:5) {
for (j in 1:30) {
std[j,i] = mean(dataRozdiel[dataRozdiel$iteracia == j,i])
}
}
dataPlot1 = as.data.frame(std)
dataPlot1 = rbind(matrix(dataPlot1[,1], ncol = 1),
matrix(dataPlot1[,2], ncol = 1),
matrix(dataPlot1[,3], ncol = 1),
matrix(dataPlot1[,4], ncol = 1),
matrix(dataPlot1[,5], ncol = 1))
dataPlot1 = cbind(dataPlot1,
rep(c(3,-2,-5,-4,10), each = 30),
rep(c(1:30), 5))
dataPlot1 = as.data.frame(dataPlot1)
colnames(dataPlot1) = c("std" , "parametre", "iteracia")
dataPlot1$parametre = factor(dataPlot1$parametre,
levels = c(3,-2,-5,-4,10),
labels = c("B","C","D","F","G"))
plot = ggplot(data = dataPlot1, aes(x = iteracia, y = std, color = parametre)) +
geom_line(size = 0.5) +
geom_point(data = dataPlot1[dataPlot1$iteracia == 6,],aes(x = iteracia, y = std),
size = 3) +
facet_grid(parametre ~., scales = "free") +
labs(y="parametre elispy", x="počet iterácií") +
labs(colour = "parametre\nelipsy") +
geom_label_repel(data = dataPlot1[dataPlot1$iteracia == 6,],
aes(fill = parametre, label = std),
box.padding = unit(1, "lines"),
point.padding = unit(2, 'lines'),
colour = "black",
fontface = "bold",
size = 2.9) +
theme(legend.position="right") +
labs(colour = "parametre\nelipsy", fill = "parametre\nodhad") +
guides(colour = guide_legend(nrow = 5, override.aes = list(size = 1)),
fill = guide_legend(nrow = 5, override.aes = list(size = 1)))
plot
rm(list= ls())
source("~/../Desktop/Kod,testy a data pre model/Kapitola 4.4 - zavislost na ro sigma delta/funkcie pre test zavislosti na ro sigma delta.R")
# test ako sa skrati doba odhadu, ak dame ako vstupny parameter vektor
# v ktorom su priblizne hodnot ro, sigma, delta
#
param = paramElipsa(3,-2,-5,-4,10,0.8,0.05,0.001)
parApr1 = c(0.8, 0.05, 0.001)
parApr2 = c(0.3, 0.95, 0)
vystupTest1 = data.frame(matrix(data = NA, nrow = 0, ncol = 8))
vystupTest2 = data.frame(matrix(data = NA, nrow = 0, ncol = 8))
mat = data.frame(matrix(data = 0,nrow = 30, ncol = 8))
colnames(vystupTest1) = c("B","C","D","F","G","ro","sigma","delta")
colnames(vystupTest2) = c("B","C","D","F","G","ro","sigma","delta")
colnames(mat) = c("B","C","D","F","G","ro","sigma","delta")
for (i in c(1:300)) {
cat("iteracia: ",i,"\n")
set.seed(i)
apr1 = aproxDataTesty(param, parApr1, velkost = 100, iter = 30)
set.seed(i)
apr2 = aproxDataTesty(param, parApr2, velkost = 100, iter = 30)
if(isFALSE(apr1)){vystupTest1 = rbind(vystupTest1, mat)}
else{
vystupTest1 = rbind(vystupTest1,apr1[[2]])
}
if(isFALSE(apr2)){vystupTest2 = rbind(vystupTest2, mat)}
else{
vystupTest2 = rbind(vystupTest2,apr2[[2]])
}
}
path = setwd("~/../Desktop/Kod,testy a data pre model/Data/ZavislostNaRoSigmaDelta")
#
load("testZavislostNaRoSigmaDelta1.Rda")
data1 = vystupTest1[,1:5]
rm(vystupTest1)
load("testZavislostNaRoSigmaDelta2.Rda")
data2 = vystupTest2[,1:5]
rm(vystupTest2)
load("testZavislostNaRoSigmaDelta3.Rda")
data3 = vystupTest3[,1:5]
rm(vystupTest3)
load("testZavislostNaRoSigmaDelta4.Rda")
data4 = vystupTest4[,1:5]
rm(vystupTest4)
dt1 = cbind(data1, rep(c(1:300), each = 30))
colnames(dt1)[6] = "odhad"
dt2 = cbind(data2, rep(c(1:300), each = 30))
colnames(dt2)[6] = "odhad"
vec = as.numeric(dt1$B != 0 & dt2$B !=0)
d1 = dt1[vec == 1,]
d2 = dt2[vec == 1,]
data_1 = data.frame.to_matrix(d1)[,1:5]
data_2 = data.frame.to_matrix(d2)[,1:5]
data_1 = as.data.frame(data_1)
data_1 = cbind(data_1,rep(c(1:30),228))
colnames(data_1) = c("B","C","D","F","G","iter")
data_2 = as.data.frame(data_2)
data_2 = cbind(data_2,rep(c(1:30),228))
colnames(data_2) = c("B","C","D","F","G","iter")
matDt1 = matrix(data = NA, nrow = 30, ncol = 5)
matDt2 = matrix(data = NA, nrow = 30, ncol = 5)
for (j in 1:5) {
for (i in 1:30) {
matDt1[i,j] = mean(data_1[data_1$iter == i,j], na.rm = TRUE)
matDt2[i,j] = mean(data_2[data_2$iter == i,j], na.rm = TRUE)
}
}
data_1 = data.frame(matDt1)
data_2 = data.frame(matDt2)
colnames(data_1) = c("B","C","D","F","G")
colnames(data_2) = c("B","C","D","F","G")
data = rbind(as.matrix(data_1[,1],ncol = 1),
as.matrix(data_2[,1],ncol = 1),
as.matrix(data_1[,2],ncol = 1),
as.matrix(data_2[,2],ncol = 1),
as.matrix(data_1[,3],ncol = 1),
as.matrix(data_2[,3],ncol = 1),
as.matrix(data_1[,4],ncol = 1),
as.matrix(data_2[,4],ncol = 1),
as.matrix(data_1[,5],ncol = 1),
as.matrix(data_2[,5],ncol = 1))
data = cbind(data,
rep(c(1:30),10),
rep(c(1:5),each = 60),
rep(rep(c(1,2), each = 30),5))
data = data.frame(data)
colnames(data) = c("data", "iter","parametre", "vstup")
data$parametre = factor(data$parametre,
levels = c(1,2,3,4,5),
labels = c("B","C","D","F","G"))
data$vstup = factor(data$vstup,
levels = c(1,2),
labels = c("užívateľ", "default"))
p1 = ggplot(data = data) +
geom_line(aes(x = iter, y = data, color = vstup), size = 0.7) +
facet_grid(parametre ~., scales = "free") +
labs(y="parametre elispy", x="počet iterácií") +
labs(colour = TeX("$vstup: \\rho, \\sigma^2, \\delta$")) +
theme(legend.position="right") +
scale_color_manual(values = c("#2196F3", "#B71C1C"))
p1
rm(list= ls())
source("~/../Desktop/Kod,testy a data pre model/Kapitola 3 - funkcie model/Funkcie model.R")
# nastavenie gridu 1
#
ro     = seq(from = 0.01, to = 0.1325, length.out = 30 )  # povodne 200
sigma  = seq(from = 0.001, to = 0.2, length.out = 30) # povodne 50
delta1 = c(0, 0.0002502, 0.0002867, 0.0003284, 0.0003798, 0.000444, 0.0005270, 0.0006349, 0.0007796)
delta2 = c(0, 0.02525,   0.02867,   0.03284,   0.03798,   0.04,     0.05270,   0.06349,   0.07796)
# dataframe pre ulozenie odhadnutych dat z gridu
#
vystupGrid = data.frame(matrix(NA, nrow = (length(ro)*length(sigma)*length(delta1)),
ncol = 24))
colnames(vystupGrid) = c("B","C","D","F","G","ro","sigma","delta",
"oB","oC","oD","oF","oG","oRo","oSigma","oDelta",
"min1","min2","min3",
"Q_1","Q_2","Q_3","Q_4","Q_5")
set.seed(12345)
tm = proc.time()
iteracia = 1
for (k in 1:length(ro)) {
for (j in 1:length(sigma)) {
if(sigma[j] <= 0.1){
delta = delta1}
else{delta = delta2}
for (i in 1:length(delta)) {
cat("iteracia: ",iteracia,"\n")
par = paramElipsa(3,-2,-5,-4,10, ro =ro[k], sigma = sigma[j], delta = delta[i])
parApr = c(0,1,0)
apr = aproxData(par, parApr, 100, 10, plot = F, vypis = F)
vystupGrid[iteracia,] = apr
iteracia = iteracia + 1
}
}
}
